@page "/order-Customers"


@using Microsoft.EntityFrameworkCore


@inject Plugins.DataStore.SQL.AppDbContext dbContext
@inject NavigationManager NavigationManager

<PageTitle>Заказы покупателей (@count) - OptixSM</PageTitle>

<h3>Заказы покупателей (@count)</h3>

<RadzenButton Text="Обновить" Click="@Reset" Style="margin-bottom: 20px;" />

    <RadzenDataGrid @ref="gridRef" IsLoading=@isLoading Count="@count" Data="@orderCustomers" LoadData="@LoadData" TItem="OrderCustomer"
        AllowSorting="false" AllowFiltering="false" 
        AllowPaging="true" PageSize="10" PagerHorizontalAlign="HorizontalAlign.Center" PageSizeOptions="@pageSizeOptions"
        AllowColumnResize="true"
        ColumnWidth="200px"   >
        <Columns>
            <RadzenDataGridColumn TItem="OrderCustomer" Property="OrderCustomerId" Title="ID" Frozen="true" Width="70px" TextAlign="TextAlign.Center" />
            
            <RadzenDataGridColumn TItem="OrderCustomer" Property="OrderCustomer.Customer.Name" Title="Покупатель" Width="70px" />

            <RadzenDataGridColumn TItem="OrderCustomer" Property="Edited" Title="Дата редактирования"  Width="70px" TextAlign="TextAlign.Center" />

            <RadzenDataGridColumn TItem="OrderCustomer" Property="Description" Title="Description" Width="100px" />

            <RadzenDataGridColumn TItem="OrderCustomer" Property="OrderCustomer" Title="Кол-во позиций" Width="70px" TextAlign="TextAlign.Center" >
                 <Template Context="orderCustomer">
                     @dbContext.ItemOrders.Where(x => x.OrderCustomerId == orderCustomer.CustomerId).Count()
                 </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="OrderCustomer" Property="OrderCustomer" Title="Кол-во товаров" Width="70px" TextAlign="TextAlign.Center" >
                 <Template Context="orderCustomer">
                     @dbContext.ItemOrders.Sum(x => x.Quantity)
                 </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="OrderCustomer" >
                 <Template Context="orderCustomers">
                     <RadzenButton Icon="delete_forever" ButtonStyle="ButtonStyle.Light"
                            Click="@(() => OnClickDelete(orderCustomers.OrderCustomerId))">
                     </RadzenButton>
                 </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>

@code {
    RadzenDataGrid<OrderCustomer>? gridRef = null;
    int count;
    IEnumerable<OrderCustomer>? orderCustomers = null;
    bool isLoading = false;

    [Parameter]
    public IEnumerable<int> pageSizeOptions { get; set; } = new int[] { 10, 20, 30, 100, 1000 };

    async Task Reset()
    {
        if (gridRef != null)
        {
            gridRef.Reset(true);
            await gridRef.FirstPage(true);
        }
    }

    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;

        await Task.Yield();

        // This demo is using https://dynamic-linq.net
        var query = dbContext.OrderCustomers.AsQueryable();

        // Important!!! Make sure the Count property of RadzenDataGrid is set.
        count = query.Count();

        // Perform paginv via Skip and Take.
        if(args!=null)
        {
            int counForSkip = args.Skip != null ? args.Skip.Value : default(int);
            int counForTake = args.Top != null ? args.Top.Value : default(int);

            orderCustomers = query.Skip(counForSkip).Take(counForTake).ToList();
        } else {
            orderCustomers = query.ToList();
        }

        isLoading = false;
    }

    protected void OnClickAdd()
        => NavigationManager.NavigateTo("/addorderCustomers");

    protected void OnClickEdit(OrderCustomer orderCustomers)
        => NavigationManager.NavigateTo($"/editOrderCustomer/{orderCustomers.OrderCustomerId}");

    protected void OnClickDelete(int OrderCustomerId)
    {
        OrderCustomer? orderCustomers = dbContext.OrderCustomers.Find(OrderCustomerId);
        if (orderCustomers != null)
        {
            dbContext.OrderCustomers.Remove(orderCustomers);
            dbContext.SaveChangesAsync();
            //Task task = Reset();
            Task.Run(Reset);
        }
    }
}