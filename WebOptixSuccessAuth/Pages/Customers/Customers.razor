@page "/customers"



@using Microsoft.EntityFrameworkCore
@using WebOptixSuccessAuth.Components


@inject Plugins.DataStore.SQL.AppDbContext dbContext
@inject NavigationManager NavigationManager

<h3>Покупатели</h3>

<RadzenButton Text="Обновить" Click="@Reset" Style="margin-bottom: 20px;" />
<RadzenButton Text="Добавить" Click="@OnClickAdd" Style="margin-bottom: 20px;" />

    <RadzenDataGrid @ref="gridRef" IsLoading=@isLoading Count="@count" Data="@customers" LoadData="@LoadData" TItem="Customer"
        AllowSorting="false" AllowFiltering="false" 
        AllowPaging="true" PageSize="10" PagerHorizontalAlign="HorizontalAlign.Center" PageSizeOptions="@pageSizeOptions"
        AllowColumnResize="true"
        ColumnWidth="200px"   >
        <Columns >
            <RadzenDataGridColumn TItem="Customer" Property="CustomerId" Title="ID" Frozen="true" Width="70px" TextAlign="TextAlign.Center"  
                Filterable="false" Sortable="false"/>
            
            <RadzenDataGridColumn TItem="Customer" Property="Company" Title="Company" Width="200px" Frozen="true" 
                Filterable="false" Sortable="false"/>
            
            <RadzenDataGridColumn TItem="Customer" Property="Name" Title="Name" Width="100px" 
                Filterable="false" Sortable="false"/>
            <RadzenDataGridColumn TItem="Customer" Property="Fullname" Title="Fullname" Width="100px" 
                Filterable="false" Sortable="false"/>
            <RadzenDataGridColumn TItem="Customer" Property="Email" Title="Email" Width="100px" Filterable="false" Sortable="false">
                <Template Context="customer">
                    <a href="mailto: @customer.Email">@customer.Email</a>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Customer" Property="Phone" Title="Phone" Width="100px" 
                Filterable="false" Sortable="false">
               <Template Context="customer">
                    <a href="tel: @customer.Phone">@customer.Phone</a>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Customer" Property="Description" Title="Description" Width="100px" Filterable="false" Sortable="false"/>
             <RadzenDataGridColumn TItem="Customer" Filterable="false" Sortable="false">
                 <Template Context="customer">
                     @*<RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light"
                            Click="@(() => OnClickEdit(customer))">
                     </RadzenButton>*@

                     <RadzenButton Icon="delete_forever" ButtonStyle="ButtonStyle.Light"
                            Click="@(() => OnClickDelete(customer.CustomerId))">
                     </RadzenButton>
                     <ButtonEditComponent TypeName="customer" Id="@(Convert.ToInt32(customer.CustomerId))"></ButtonEditComponent>
                 </Template>
             </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>

@code {
    RadzenDataGrid<Customer>? gridRef = null;
    int count;
    IEnumerable<Customer>? customers = null;
    bool isLoading = false;

    [Parameter]
    public IEnumerable<int> pageSizeOptions { get; set; } = new int[] { 10, 20, 30, 100, 1000 };

    async Task Reset()
    {
        customers = dbContext.Customers.ToArray();
        //if (gridRef != null)
        //{
        //    gridRef.Reset(true);
            await gridRef.FirstPage(true);
        //}

        customers = dbContext.Customers.ToArray();
        gridRef.FirstPage(true);
    }

    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;

        await Task.Yield();

        // This demo is using https://dynamic-linq.net
        var query = dbContext.Customers.AsQueryable();

        // Important!!! Make sure the Count property of RadzenDataGrid is set.
        count = query.Count();

        // Perform paginv via Skip and Take.
        if(args!=null)
        {
            int counForSkip = args.Skip != null ? args.Skip.Value : default(int);
            int counForTake = args.Top != null ? args.Top.Value : default(int);

            customers = query.Skip(counForSkip).Take(counForTake).ToList();
        } else {
            customers = query.ToList();
        }

        isLoading = false;
    }

    protected void OnClickAdd()
        => NavigationManager.NavigateTo("/add-customer");

    protected void OnClickEdit(Customer customer)
        => NavigationManager.NavigateTo($"/edit-order-customer/{customer.CustomerId}");

    protected void OnClickDelete(int CustomerId)
    {
        Customer? customer = dbContext.Customers.Find(CustomerId);
        if (customer != null)
        {
            dbContext.Customers.Remove(customer);
            dbContext.SaveChanges();
            NavigationManager.NavigateTo("/customers", true);

            //Task task = Reset();
            //Task.Run(Reset);
            
            //customers = dbContext.Customers.ToList();
            //gridRef.FirstPage(true);
        }
    }
}