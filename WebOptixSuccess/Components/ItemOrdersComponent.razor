@using CoreBusiness.Models
@using Microsoft.EntityFrameworkCore
@inject NavigationManager NavigationManager
@inject Plugins.DataStore.SQL.AppDbContext dbContext

@if (ItemOrderCollection == null)
{
    <p><em>Loading...</em></p>
} else {
            <RadzenTabs>
                <Tabs>
                    <RadzenTabsItem Text="Детали заказа">

                        

                        <RadzenDataGrid @ref="grid" AllowFiltering="true" AllowSorting="true" Data="@(ItemOrderCollection)" TItem="ItemOrder"
                            AllowPaging="true" PageSize="3" PagerHorizontalAlign="HorizontalAlign.Center" PageSizeOptions="@pageSizeOptions"
                            AllowColumnResize="true" >
                            <EmptyTemplate>
                                <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">В данном заказе еще нет товаров. Добавьте товары в заказ.</p>
                            </EmptyTemplate>
                            <Columns>
                                <RadzenDataGridColumn TItem="ItemOrder" Property="ItemOrderId" Title="Id" Width="70px" TextAlign="TextAlign.Center"/>
                                <RadzenDataGridColumn TItem="ItemOrder" Property="Product.ProductName" Title="Товар" Width="200px" >
                                    <Template Context="detail">
                                        @String.Format("{0}, BC:{1}, Sph:{2}, (Id:{3})", detail?.Product?.Name, @detail?.Product?.BC, @detail?.Product?.Sph, @detail?.ProductId)
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="ItemOrder" Property="OrderCustomerId" Title="№ зак.пок*" Width="100px" TextAlign="TextAlign.Center"/>

                                <RadzenDataGridColumn TItem="ItemOrder" Property="OrderVendorId" Title="№ зак. пост*" TextAlign="TextAlign.Center">
                                    <Template Context="detail">
                                        <RadzenNumeric TValue="int?" Change=@(() => OnChangeItemOrderVendor(detail.ItemOrderId, detail.OrderVendorId)) Class="w-100" @bind-Value=@detail.OrderVendorId/>
                                    </Template>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn TItem="ItemOrder" Property="Price" Title="Цена" TextAlign="TextAlign.Center">
                                    <Template Context="detail">
                                        @String.Format(new System.Globalization.CultureInfo("ru-ru"), "{0:C}", detail.Price)
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="ItemOrder" Property="Quantity" Title="Кол-во" TextAlign="TextAlign.Center"/>
                                <RadzenDataGridColumn TItem="ItemOrder" Property="Summ" Title="Сумма" TextAlign="TextAlign.Center">
                                    <Template Context="itemOrder">
                                        @String.Format("{0} руб.", itemOrder.Price * itemOrder.Quantity)
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="ItemOrder" TextAlign="TextAlign.Center">
                                    <Template Context="detail">
                                        <RadzenButton Icon="delete_forever" Click="@(() => DeleteItemOrder(detail.ItemOrderId))"
                                            Class="mb-4" ButtonStyle="ButtonStyle.Light" />  
                                    </Template>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>
                        <br/>
                        
                        <div class="row" >
                            <div class="col-md-6">
                                <RadzenButton Icon="refresh" Text="Обновить Таблицу" Click="@Reset"  
                                    ButtonStyle="ButtonStyle.Light" Style="margin: 10px;"/>
                                <RadzenButton Icon="control_point" Text="Добавить любой товар" Click="@(() => AddRandomItemOrder())"
                                    Class="mb-4" ButtonStyle="ButtonStyle.Light"  Style="margin: 10px;" />  
                            </div>
                            <div class="col-md-6" >
                                <RadzenButton Text="Export XLS" Icon="grid_on" Click="@(args => Export("excel"))" Class="mb-4 mr-2" ButtonStyle="ButtonStyle.Light"/>
                                <RadzenButton Text="Export CSV" Icon="wrap_text" Click="@(args => Export("csv"))" Class="mb-4" ButtonStyle="ButtonStyle.Light"/>  
                            </div>
                            <div class="col-md-6" >
                                <p><b>1* (№ зак.пок)</b> - № Заказа от покупателя</p>
                                <p><b>2* (№ зак.пост)</b> - № Заказа для поставщика</p>
                            </div>
                        </div>                        
                        
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="Товары">
                        <RadzenDataList WrapItems="true" AllowPaging="true" Data="@(ItemOrderCollection)" TItem="ItemOrder" PageSize="10">
                            <Template Context="detail">
                                <RadzenCard >
                                    <b>@detail?.Product?.Name</b>
                                    @String.Format(" BC:{0}, Sph:{1}, Cell:{2}",  @detail?.Product?.BC, @detail?.Product?.Sph, @detail?.Product?.Cell)
                                </RadzenCard>
                            </Template>
                        </RadzenDataList>
                    </RadzenTabsItem>
                </Tabs>
            </RadzenTabs>
            }

@code {
    RadzenDataGrid<ItemOrder>? grid = null;
    IEnumerable<int> pageSizeOptions = new int[] { 10, 20, 30 };

    [Parameter]
    public IList<ItemOrder>? ItemOrderCollection { get; set; }

    [Parameter]
    public EventCallback UpdateCallback { get; set; }

    async Task Reset()
    {
        if (grid != null)
        {
            grid.Reset(true);
            await grid.FirstPage(true);
        }
    }

    private void OnChangeItemOrderVendor(int ItemOrderId, int? OrderVendorId)
    {
        ItemOrder? itemOrder = dbContext.ItemOrders?.Find(ItemOrderId);
        if (itemOrder != null)
        {
            if (OrderVendorId == null)
            {
                itemOrder.OrderVendorId = null;
                dbContext.Update(itemOrder);
                dbContext.SaveChanges();
            }
            else
            {
                OrderVendor? orderVendor = dbContext.OrderVendors?.Find(OrderVendorId);
                if (orderVendor != null)
                {
                    itemOrder.OrderVendorId = OrderVendorId;
                    dbContext.Update(itemOrder);
                    dbContext.SaveChanges();
                    //console.Log($"{name} value changed to {value}");
                }
                else
                {
                    itemOrder.OrderVendorId = null;
                    dbContext.Update(itemOrder);
                    dbContext.SaveChanges();
                }
            }
        } else {
            throw new Exception("ItemOrderId not found. Обратитесь к администратору.");
        }
    }

    protected void DeleteItemOrder(int ItemOrderId)
    {
        ItemOrder? itemOrder = dbContext.ItemOrders.Find(ItemOrderId);
        if(itemOrder != null)
        {
            dbContext.ItemOrders.Remove(itemOrder);
            dbContext.SaveChanges();
            // UpdateCallback.InvokeAsync();
            //ItemOrderCollection.Remove(itemOrder);
            Task delayTask = Reset(); // https://docs.microsoft.com/ru-ru/dotnet/csharp/language-reference/compiler-messages/cs4014
        }
    }

    protected void AddRandomItemOrder()
    {
        var random = new Random();
        ItemOrder itemOrder = new ItemOrder();
        int? tempOrderCustomerId;
        if(ItemOrderCollection?.Count == 0)
        {
            tempOrderCustomerId =dbContext.OrderCustomers.FirstOrDefault()?.OrderCustomerId;
        }else
        {
            tempOrderCustomerId = (ItemOrderCollection?.First()?.OrderCustomerId) ?? (dbContext.OrderCustomers.FirstOrDefault()?.OrderCustomerId);
        }

        if ( tempOrderCustomerId != null )
        {
            itemOrder.OrderCustomerId = tempOrderCustomerId ?? default(int);
            itemOrder.ProductId = random.Next(1, 500);
            itemOrder.Quantity = random.Next(1, 1000);

            dbContext.ItemOrders.Add(itemOrder);
            dbContext.SaveChangesAsync();
            // UpdateCallback.InvokeAsync();
            //ItemOrderCollection.Add(itemOrder);
            #pragma warning disable 4014
            Reset();  //https://docs.microsoft.com/ru-ru/dotnet/csharp/language-reference/compiler-messages/cs4014
                      // https://www.stackfinder.ru/questions/22629951/suppressing-warning-cs4014-because-this-call-is-not-awaited-execution-of-the
            #pragma warning restore 4014            
        }
    }

    public void Export(string type)
    {
        if (grid != null)
        {
            serviceExport("OrderDetails", type, new Query() { OrderBy = grid.Query.OrderBy, Filter = grid.Query.Filter });
        }
    }

    public void serviceExport(string table, string type, Query? query = null)
    {
        NavigationManager.NavigateTo(query != null ? query.ToUrl($"/export/northwind/{table}/{type}") : $"/export/northwind/{table}/{type}", true);
    }
}
