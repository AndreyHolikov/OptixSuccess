@page "/editcustomer/{customerId}"
@*
@using UseCases
@inject IEditCustomerUseCase EditCustomerUseCase
@inject IGetCustomerByIdUseCase GetCustomerByIdUseCase 
*@
@using CoreBusiness
@inject Plugins.DataStore.SQL.AppDbContext dbContext

@inject NavigationManager NavigationManager

<h3>Редактирование клиента</h3>

@if(customer != null)
{
    <EditForm Model="customer"  OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="name">Login</label>
            <InputText id="name" @bind-Value="customer.Name" class="form-control"></InputText>
        </div>

        <div class="form-group">
            <label for="fullname">ФИО</label>
            <InputText id="fullname" @bind-Value="customer.Fullname" class="form-control"></InputText>
        </div>

        <div class="form-group">
            <label for="password">Пароль</label>
            <InputText id="password" @bind-Value="customer.Password" class="form-control"></InputText>
        </div>

        <div class="form-group">
            <label for="email">Email</label>
            <InputText id="email" @bind-Value="customer.Email" class="form-control"></InputText>
        </div>

        <div class="form-group">
            <label for="company">Организация</label>
            <InputText id="company" @bind-Value="customer.Company" class="form-control"></InputText>
        </div>

        <div class="form-group">
            <label for="phone">Телефон</label>
            <InputText id="phone" @bind-Value="customer.Phone" class="form-control"></InputText>
        </div>

        <div class="form-group">
            <label for="description">Описание</label>
            <InputTextArea id="description" @bind-Value="customer.Description" class="form-control"></InputTextArea>
        </div>

        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-primary" @onclick="OnCansel">Cansel</button>
    </EditForm>
}

@code {
    #region private fields
    private Customer? customer;
    #endregion


    #region public parameter
    [Parameter]
    public string? CustomerId { get; set; }
    #endregion

    #region protected methods
    protected override void OnInitialized() => base.OnInitialized();

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (int.TryParse(this.CustomerId, out int iCustomerId)) 
        {
            this.customer = dbContext.Customers?.Find(iCustomerId);
            //this.customer = GetCustomerByIdUseCase.Execute(iCustomerId);
            if (this.customer == null) GoToPageError(101);
        } else
        {
            GoToPageError(101);
        }
    }
    #endregion


    #region private methods
    private void OnValidSubmit()
    {
        if (customer != null)
        {
            dbContext.Customers.Update(customer);
            dbContext.SaveChangesAsync();
            //EditCustomerUseCase.Execute(customer);
            GoToPageCustomers();
        } else
        {
            GoToPageError(101);
        }
    }

    private void OnCansel() => GoToPageCustomers();

    #endregion

     #region private GoTo methods
     private void GoToPageCustomers() => NavigationManager.NavigateTo("/customers");
     private void GoToPageError(int errorId) => NavigationManager.NavigateTo($"/error/{errorId}");
     #endregion
}
