@page "/products"

@inject NavigationManager NavigationManager


@using Microsoft.EntityFrameworkCore


@inject Plugins.DataStore.SQL.AppDbContext dbContext

<h3>Товары</h3>
<RadzenButton Text="Обновить" Click="@Reset" Style="margin-bottom: 20px;" />

    <RadzenDataGrid @ref="grid" IsLoading=@isLoading Count="@count" Data="@products" LoadData="@LoadData" TItem="Product"
        AllowSorting="true" AllowFiltering="true" 
        AllowPaging="true" PageSize="10" PagerHorizontalAlign="HorizontalAlign.Center" PageSizeOptions="@pageSizeOptions"
        AllowColumnResize="true"
        ColumnWidth="200px"   >
        <Columns>
            <RadzenDataGridColumn TItem="Product" Property="ProductId" Title="ID" Frozen="true" Width="70px" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="Product" Property="Name" Title="Name" Frozen="true" Width="200px"/>
            <RadzenDataGridColumn TItem="Product" Property="BC" Title="BC" Width="100px"/>
            <RadzenDataGridColumn TItem="Product" Property="Sph" Title="Sph" Width="100px" />
            <RadzenDataGridColumn TItem="Product" Property="Cell" Title="Cell" Width="100px" />
            <RadzenDataGridColumn TItem="Product" Property="Quantity" Title="Кол-во" Width="100px" />
            <RadzenDataGridColumn TItem="Product" Property="Price" Title="Цена" Width="100px" />
        </Columns>
    </RadzenDataGrid>

@code {
    RadzenDataGrid<Product>? grid = null;
    int count;
    IEnumerable<int> pageSizeOptions = new int[] { 10, 20, 30, 100, 1000 };
    IEnumerable<Product>? products = null;
    bool isLoading = false;

    async Task Reset()
    {
        if (grid != null)
        {
            grid.Reset(true);
            await grid.FirstPage(true);
        }
    }

    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;

        await Task.Yield();

        // This demo is using https://dynamic-linq.net
        var query = dbContext.Products.AsQueryable();

        if (!string.IsNullOrEmpty(args.Filter))
        {
            // Filter via the Where method
            //TODO:Connect Filter 
            // query = query.Where(args.Filter);
        }

        if (!string.IsNullOrEmpty(args.OrderBy))
        {
            // Sort via the OrderBy method
            //TODO:Connect OrderBy 
            // query = query.OrderBy(args.OrderBy);
        }

        // Important!!! Make sure the Count property of RadzenDataGrid is set.
        count = query.Count();

        // Perform paginv via Skip and Take.
        if(args!=null)
        {
            int counForSkip = args.Skip != null ? args.Skip.Value : default(int);
            int counForTake = args.Top != null ? args.Top.Value : default(int);

            products = query.Skip(counForSkip).Take(counForTake).ToList();
        } else {
            products = query.ToList();
        }

        isLoading = false;
    }
}

