@page "/customers"

@using CoreBusiness
@using Microsoft.EntityFrameworkCore
@using Plugins.DataStore.SQL

@inject Plugins.DataStore.SQL.AppDbContext dbContext
@inject NavigationManager NavigationManager

<h3>Покупатели</h3>

<RadzenButton Text="Обновить" Click="@Reset" Style="margin-bottom: 20px;" />

    <RadzenDataGrid @ref="grid" IsLoading=@isLoading Count="@count" Data="@customers" LoadData="@LoadData" TItem="Customer"
        AllowSorting="true" AllowFiltering="true" 
        AllowPaging="true" PageSize="10" PagerHorizontalAlign="HorizontalAlign.Center" PageSizeOptions="@pageSizeOptions"
        AllowColumnResize="true"
        ColumnWidth="200px"   >
        <Columns>
            <RadzenDataGridColumn TItem="Customer" Property="CustomerId" Title="ID" Frozen="true" Width="70px" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="Customer" Property="Name" Title="Name" Frozen="true" Width="200px"/>
            <RadzenDataGridColumn TItem="Customer" Property="Fullname" Title="Fullname" Width="100px"/>
            <RadzenDataGridColumn TItem="Customer" Property="Email" Title="Email" Width="100px" />
            <RadzenDataGridColumn TItem="Customer" Property="Company" Title="Company" Width="100px" />
            <RadzenDataGridColumn TItem="Customer" Property="Phone" Title="Phone" Width="100px" />
            <RadzenDataGridColumn TItem="Customer" Property="Description" Title="Description" Width="100px" />
             <RadzenDataGridColumn TItem="Customer" >
                 <Template Context="customer">
                     <RadzenButton Icon="delete_forever" ButtonStyle="ButtonStyle.Light"
                            Click="@(() => OnClickDeleteCustomer(customer.CustomerId))">
                     </RadzenButton>
                 </Template>
             </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>

@code {
    RadzenDataGrid<Customer>? grid = null;
    int count;
    IEnumerable<int> pageSizeOptions = new int[] { 10, 20, 30, 100, 1000 };
    IEnumerable<Customer>? customers = null;
    bool isLoading = false;

    async Task Reset()
    {
        if (grid != null)
        {
            grid.Reset(true);
            await grid.FirstPage(true);
        }
    }

    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;

        await Task.Yield();

        // This demo is using https://dynamic-linq.net
        var query = dbContext.Customers.AsQueryable();

        // Important!!! Make sure the Count property of RadzenDataGrid is set.
        count = query.Count();

        // Perform paginv via Skip and Take.
        if(args!=null)
        {
            int counForSkip = args.Skip != null ? args.Skip.Value : default(int);
            int counForTake = args.Top != null ? args.Top.Value : default(int);

            customers = query.Skip(counForSkip).Take(counForTake).ToList();
        } else {
            customers = query.ToList();
        }

        isLoading = false;
    }

    protected void OnClickAddCustomer()
    {
        NavigationManager.NavigateTo("/addcustomer");
    }

    protected void OnClickEditItemOrder(ItemOrder itemOrder)
    {
        NavigationManager.NavigateTo($"/editCustomer/{itemOrder.ItemOrderId}");
    }

    protected void OnClickDeleteCustomer(int CustomerId)
    {
        Customer? customer = dbContext.Customers.Find(CustomerId);
        if (customer != null)
        {
            dbContext.Customers.Remove(customer);
            dbContext.SaveChangesAsync();
            Task task = Reset();
        }
    }
}