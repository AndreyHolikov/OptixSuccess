@page "/customers"

@inject NavigationManager NavigationManager
@inject IViewCustomersUseCase ViewCustomersUseCase
@inject IDeleteCustomerUseCase DeleteCustomerUseCase
@inject IGetOrderCustomerByCustomerIdUseCase GetOrderCustomerByCustomerIdUseCase

@using WebApp.Components

<h3>Клиенты</h3>

@if(customers != null)
{
        <table class="table table-responsive" id="myTable">
            <thead>
                <tr>
                    <th>№</th>
                    <td>Login</td>
                    <th>ФИО</th>
                    <th>Компания</th>
                    <th>Email</th>
                    <th>Телефон</th>
                    <th>Описание</th>
                    <th>Кол-во заказов</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach(var customer in customers)
                {
                    <tr>
                        <td>@customer.CustomerId</td>
                        <td>@customer.Name</td>
                        <td>@customer.Fullname</td>
                        <td>@customer.Company</td>
                        <td>@customer.Email</td>
                        <td>@customer.Phone</td>
                        <td>@customer.Description</td>
                        <td>@GetOrderCustomerByCustomerIdUseCase.Execute(customer.CustomerId).Count()</td>
                        <td>
                            <ButtonEditComponent TypeName="customer" Id="@customer.CustomerId.ToString()" Text="Редактировать"></ButtonEditComponent>
                            
                            <button tupe="button" @onclick="@(() => DeleteCustomer(customer.CustomerId))" class="btn btn-light"><i class="far fa-trash-alt"></i> Удалить</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <br/>
        <button type="button" @onclick="OnClickAddCustomer" class="btn btn-primary">Добавить клиента</button>
}

@code {
    private List<Customer> customers;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        customers = ViewCustomersUseCase.Execute()?.ToList();
    }

    protected void OnClickAddCustomer()
    {
        NavigationManager.NavigateTo("/addcustomer");
    }



    protected void DeleteCustomer(int CustomerId)
    {
        DeleteCustomerUseCase?.Delete(CustomerId);
        LoadCustomers();
    }

    private void LoadCustomers()
    {
        customers = ViewCustomersUseCase.Execute()?.ToList();
    }
}
