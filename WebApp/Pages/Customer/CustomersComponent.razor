@page "/customers"

@inject NavigationManager NavigationManager
@inject UseCases.IViewCustomersUseCase ViewCustomersUseCase
@inject UseCases.IDeleteCustomerUseCase DeleteCustomerUseCase

<h3>Manage Customers</h3>

@if(customers != null)
{
        <table class="table" id="myTable">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Description</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach(var customer in customers)
                {
                    <tr>
                        <td>@customer.Name</td>
                        <td>@customer.Description</td>
                        <td>
                            <button tupe="button" @onclick="@(() => EditCustomer(customer))" class="btn btn-light">Edit</button>
                            <button tupe="button" @onclick="@(() => DeleteCustomer(customer.СustomerId))" class="btn btn-light">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <br/>
        <button type="button" @onclick="OnClickAddCustomer" class="btn btn-primary">Add Customer</button>
}

@code {
    private List<Customer> customers;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        customers = ViewCustomersUseCase.Execute()?.ToList();
    }

    protected void OnClickAddCustomer()
    {
        NavigationManager.NavigateTo("/addcustomer");
    }

    protected void EditCustomer(Customer customer)
    {
        //NavigationManager.NavigateTo($"/editcustomer/{customer.CustomerId}");
    }

    protected void DeleteCustomer(int CustomerId)
    {
        DeleteCustomerUseCase?.Delete(CustomerId);
        LoadCustomers();
    }

    private void LoadCustomers()
    {
        customers = ViewCustomersUseCase.Execute()?.ToList();
    }
}
