@inject NavigationManager NavigationManager
@inject IViewCustomersUseCase ViewCustomersUseCase
@inject IDeleteCustomerUseCase DeleteCustomerUseCase

@inject IViewOrderCustomersUseCase ViewOrderCustomersUseCase
@inject IDeleteOrderCustomerUseCase DeleteOrderCustomerUseCase

@inject IViewItemOrdersUseCase ViewItemOrdersUseCase
@inject IDeleteItemOrderUseCase DeleteItemOrderUseCase

@inject IGetProductByIdUseCase GetProductByIdUseCase


<div class="optix-widget optix-font">
<div class="row optix-row-1">
    <div class="col col-auto m-2 p-4 bg-light border widget-column-border">
        <div>
            <h4 class="mx-auto">
                <NavLink class="nav-link optix-widget-title" href="customers">
                    Покупатели (@customers.Count())
                </NavLink>     
            </h4>
            <br/>
            @if (customers != null)
            {
                <div class="table-responsive">
                    <table class="table table-hover table-sm align-middle">
                        <thead>
                            <tr>
                                <th>Id</th>
                                <th>Login</th>
                                <th>                
                                    <NavLink class="nav-link" href="addcustomer" style="float:left;">
                                        <i class="fas fa-plus-square"></i>
                                    </NavLink>
                                    <button tupe="button"  @onclick="(() => LoadCustomers())" class="btn btn-link">
                                        <i class="fas fa-sync-alt" ></i>
                                    </button>                                    
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @{int i = 0;}
                            @foreach (var customer in customers)
                            {
                                <tr  @onclick="@(() => ClickCustomer(customer.СustomerId))"  style="cursor:pointer">
                                    <td class="align-middle">@customer.СustomerId</td>
                                    <td class="align-middle">@customer.Name</td>
                                    <td>
                                        <button tupe="button" @onclick="@(() => ClickCustomer(customer.СustomerId))" class="btn btn-link">
                                            <i class="fas fa-eye"></i>
                                        </button>
                                        <button tupe="button" @onclick="@(() => EditCustomer(customer))" class="btn btn-link">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button tupe="button" @onclick="@(() => DeleteCustomer(customer.СustomerId))" class="btn btn-link">
                                            <i class="far fa-trash-alt"></i>
                                        </button>
                                    </td>
                                </tr>
                                i++;
                                if (i >= 3) break;
                            }
                        </tbody>
                </table>
            </div>
            }
        </div>
    </div>
    <div class="col col-auto m-2 p-4 bg-light border widget-column-border">
        <div>
            <h4 class="mx-auto">
                <NavLink class="nav-link optix-widget-title" href="ordercustomers" style="float:left;">
                    Заказы от покупателей  (@orderCustomers.Count())
                </NavLink>         
            </h4>
            <br/>
            @if (orderCustomers != null)
            {
                <div class="table-responsive">
                    <table class="table table-hover table-sm align-middle">
                        <thead>
                            <tr>
                                <th>Id</th>
                                <th>Name</th>
                                <th>
                                    <NavLink class="nav-link" href="addordercustomer" style="float:left;">
                                        <i class="fas fa-plus-square"></i>
                                    </NavLink>
                                    <button tupe="button"  @onclick="(() => LoadOrderCustomers())" class="btn btn-link">
                                        <i class="fas fa-sync-alt" ></i>
                                    </button> 
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @{int i = 0;}
                            @foreach (var orderCustomer in orderCustomers)
                            {
                                <tr @onclick="@(() => ClickOrderCustomer(orderCustomer.OrderCustomerId))" style="cursor:pointer">
                                    <td class="align-middle">@orderCustomer.OrderCustomerId</td>
                                    <td class="align-middle">@orderCustomer.Name</td>
                                    <td>
                                        <button tupe="button" @onclick="@(() => ClickOrderCustomer(orderCustomer.OrderCustomerId))" class="btn btn-link">
                                            <i class="fas fa-eye"></i>
                                        </button>
                                        <button tupe="button" @onclick="@(() => EditOrderCustomer(orderCustomer))" class="btn btn-link">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button tupe="button" @onclick="@(() => DeleteOrderCustomer(orderCustomer.OrderCustomerId))" class="btn btn-link">
                                            <i class="far fa-trash-alt"></i>
                                        </button>
                                    </td>
                                </tr>
                                i++;
                                if (i >= 3) break;
                            }
                        </tbody>
                </table>
            </div>
            }
        </div>
    </div>
    <div class="col col-auto m-2 p-4 bg-light border widget-column-border">
        <div class="widget-header">
            <h4 class="mx-auto">
                <NavLink class="nav-link optix-widget-title" href="itemorders">
                    Товары в заказах   (@itemOrders.Count())
                </NavLink>   
            </h4>
        </div>
        <hr/>
        <div class="widget-content">
            <hr/>
            @if (itemOrders != null)
            {
                <div class="table-responsive">
                    <table class="table table-hover table-sm align-middle">
                        <thead>
                            <tr>
                                <th>Id</th>
                                <th>Product</th>
                                <th>Quantity</th>
                                <th>Price</th>
                                <th>
                                    <NavLink class="nav-link" href="additemorder" style="float:left;">
                                        <i class="fas fa-plus-square"></i>
                                    </NavLink>
                                    <button tupe="button"  @onclick="(() => LoadItemOrders())" class="btn btn-link">
                                        <i class="fas fa-sync-alt" ></i>
                                    </button> 
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @{int i =0;}
                            @foreach (var itemOrder in itemOrders)
                            {
                                <tr @onclick="@(() => ClickItemOrder(itemOrder.ItemOrderId))"  style="cursor:pointer">
                                    <td class="align-middle">@itemOrder.ItemOrderId</td>
                                    <td class="align-middle">@GetProductByIdUseCase.Execute(itemOrder.ProductId).Name</td>
                                    <td class="align-middle">@itemOrder.Quantity</td>
                                    <td class="align-middle">@itemOrder.Price</td>
                                    <td>
                                        <button tupe="button" @onclick="@(() => EditItemOrder(itemOrder))" class="btn btn-link">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button tupe="button" @onclick="@(() => DeleteItemOrder(itemOrder.ItemOrderId))" class="btn btn-link">
                                            <i class="far fa-trash-alt"></i>
                                        </button>
                                    </td>
                                </tr>
                                i++;
                                if (i >= 3) break;
                            }
                        </tbody>
                </table>
            </div>
            }
        </div>
        <hr/>
        <div class="widget-footer">
            <EditForm Model="@miniItemOrder">
                <DataAnnotationsValidator />
                <ValidationSummary />

    
                <div class="form-group">
                    <label>Выбраные товары: @GetSelectedItemOrdersAsString()</label>
                </div>

                <div class="form-group">
                    <label for="orderVendorId">Заказ поставщика</label>
                    <InputNumber id="orderVendorId" @bind-Value="miniItemOrder.OrderVendorId" class="form-control"></InputNumber>
                </div>

                <button type="submit" class="btn btn-info">Отправить в заказ</button>
            </EditForm>
        </div>
    </div>
</div>
</div>

@code {

    #region private fields
    private List<CoreBusiness.Customer> customers;
    private List<CoreBusiness.OrderCustomer> orderCustomers;
    private List<CoreBusiness.ItemOrder> itemOrders;

    record MiniItemOrder
    {
        public List<int> selectedItemOrders { get; set; } = new List<int>() { 1, 2 };  
        public int OrderVendorId { get; set; }
        public MiniItemOrder(int orderVendorId = 1 ) => OrderVendorId = orderVendorId;
    }

    private MiniItemOrder miniItemOrder = new MiniItemOrder();
    #endregion

    private string GetSelectedItemOrdersAsString()
        => string.Join(",", miniItemOrder.selectedItemOrders);


    protected override void OnInitialized()
    {
        base.OnInitialized();
        LoadCustomers();
        LoadOrderCustomers();
        LoadItemOrders(); 
    }

    #region Customer
    protected void LoadCustomers()
        => customers = ViewCustomersUseCase.Execute()?.ToList();

    protected void OnClickAddCustomer()
        => NavigationManager.NavigateTo("/addcustomer");

    protected void EditCustomer(CoreBusiness.Customer customer)
        => NavigationManager.NavigateTo($"/editcustomer/{customer.СustomerId}");

    protected void DeleteCustomer(int CustomerId)
    {
        DeleteCustomerUseCase?.Delete(CustomerId);
        LoadCustomers();
    }

    protected void ClickCustomer(int customerId)
        => orderCustomers = ViewOrderCustomersUseCase.Execute()?.Where(x=> x.CustomerId == customerId).ToList();
    #endregion 

    #region OrderCustomer
    private void LoadOrderCustomers()
        => orderCustomers = ViewOrderCustomersUseCase.Execute()?.ToList();

    protected void OnClickAddOrderCustomer()
        => NavigationManager.NavigateTo("/addordercustomer");

    protected void EditOrderCustomer(CoreBusiness.OrderCustomer orderCustomer)
        => NavigationManager.NavigateTo($"/editordercustomer/{orderCustomer.OrderCustomerId}");

    protected void DeleteOrderCustomer(int OrderCustomerId)
    {
        DeleteOrderCustomerUseCase?.Delete(OrderCustomerId);
        LoadOrderCustomers();
    }

    protected void ClickOrderCustomer(int orderCustomerId)
        => itemOrders = ViewItemOrdersUseCase.Execute()?.Where(x => x.OrderCustomerId == orderCustomerId).ToList();
    #endregion 

    #region ItemOrder
    private void LoadItemOrders()
        => itemOrders = ViewItemOrdersUseCase.Execute()?.ToList();

    protected void OnClickAddItemOrder()
        => NavigationManager.NavigateTo("/additemorder");

    protected void EditItemOrder(CoreBusiness.ItemOrder orderCustomer)
        => NavigationManager.NavigateTo($"/edititemorder/{orderCustomer.OrderCustomerId}");

    protected void DeleteItemOrder(int ItemOrderId)
    {
        DeleteItemOrderUseCase?.Delete(ItemOrderId);
        LoadItemOrders();
    }

    protected void ClickItemOrder(int itemOrderId)
    {
        if (miniItemOrder.selectedItemOrders.IndexOf(itemOrderId) == -1) // .Exists(x => x. == itemOrderId))
            miniItemOrder.selectedItemOrders.Add(itemOrderId);
        else
            miniItemOrder.selectedItemOrders.Remove(itemOrderId);
    }
    #endregion 
}
