@inject NavigationManager NavigationManager

@inject IViewCustomersUseCase ViewCustomersUseCase
@inject IDeleteCustomerUseCase DeleteCustomerUseCase
@inject IGetCustomerByIdUseCase GetCustomerByIdUseCase

@inject IViewOrderCustomersUseCase ViewOrderCustomersUseCase
@inject IDeleteOrderCustomerUseCase DeleteOrderCustomerUseCase
@inject IGetOrderCustomerByIdUseCase GetOrderCustomerByIdUseCase

@inject IViewItemOrdersUseCase ViewItemOrdersUseCase
@inject IDeleteItemOrderUseCase DeleteItemOrderUseCase
@inject IGetItemOrderByIdUseCase GetItemOrderByIdUseCase
@inject IEditItemOrderUseCase EditItemOrderUseCase
@inject IGetItemOrdersByOrderCustomerIdUseCase GetItemOrdersByOrderCustomerIdUseCase
@inject IGetItemOrdersByOrderVendorIdUseCase GetItemOrdersByOrderVendorIdUseCase

@inject IGetProductByIdUseCase GetProductByIdUseCase

@inject IGetOrderVendorByIdUseCase GetOrderVendorByIdUseCase 

@using WebApp.Components

@using System.Linq.Dynamic.Core
@*using Microsoft.EntityFrameworkCore*@


<div class="optix-widget optix-font container ">
<div class="row optix-row-1 optix-page-content justify-content-center">
    <div class="col col-auto m-2 p-4 bg-light border widget-column-border">
        <TitleWidgetWithCountComponent Text="Покупатели" Href="customers"  CountItem=@CountCustomersOnPage FullCount=@customers.Count()></TitleWidgetWithCountComponent>
        <div>
            @if (customers != null)
            {
                    <div class="table-responsive">
                        <table class="table table-hover table-sm align-middle cursor-pointer text-align-center table-responsive">
                            <thead>
                                <tr class="text-align-center">
                                    <th class="align-middle">№</th>
                                    <th class="align-middle">Компания</th>
                                    <th class="align-middle">Кол-во<br/>заказов</th>
                                    <th>                
                                        <ButtonAddComponent TypeName="Customer"></ButtonAddComponent>
                                        <button tupe="button"  @onclick="(() => LoadCustomers())" class="btn btn-link">
                                            <i class="fas fa-sync-alt" ></i>
                                        </button> 
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @{ int i = 0;
                                    foreach (var customer in customers)
                                    {
                                        <tr  @onclick="@(() => ClickCustomer(customer.СustomerId))" class="cursor-pointer text-align-center">
                                            <td class="align-middle">@customer.СustomerId</td>
                                            <td class="align-middle">@customer.Company</td>
                                            <td class="align-middle">@GetOrderCustomerCount(customer.СustomerId)</td>
                                            <td>
                                                <ButtonEditComponent TypeName="customer" Id="@customer.СustomerId.ToString()"></ButtonEditComponent>
                                                <button type="button" @onclick="@(() => DeleteCustomer(customer.СustomerId))" class="btn btn-link">
                                                    <i class="far fa-trash-alt"></i>
                                                </button>
                                            </td>
                                        </tr>
                                        i++;
                                        if (i >= CountCustomersOnPage) break;
                                    }
                                }
                            </tbody>
                        </table>

                        <RadzenDataGrid Data="@customers" TItem="Customer" Count="@countCustomers" AllowVirtualization="true" 
                            AllowPaging="true" PageSize="2" PageSizeOptions="@pageSizeOptions" 
                            AllowColumnResize="true" ColumnWidth="60px"
                            AllowSorting="true"
                            SelectionMode="DataGridSelectionMode.Single" Filterable="false">
                            <Columns>
                                <RadzenDataGridColumn TItem="Customer" Property="СustomerId" Title="ID" Width="30px"  />
                                <RadzenDataGridColumn TItem="Customer" Property="Company" Title="Company" Width="100px">
                                    <Template Context="customer">
                                        <a href="/ordercustomers/@customer.СustomerId">@customer.Company</a>
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="Customer" Property="CustomerId" Title="Заказов" Sortable="false" Width="30px">
                                    <Template Context="customer">
                                        @GetOrderCustomerCount(customer.СustomerId)
                                    </Template>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn TItem="Customer" Context="customer" Sortable="false" TextAlign="TextAlign.Center" Width="60px">
                                        <Template Context="customer">
                                         <button type="button" @onclick="@(() => ClickCustomer(customer.СustomerId))" class="btn btn-link">
                                            <i class="fa fa-eye"></i>
                                        </button>
                                         <button type="button" @onclick="@(() => ShowOrderCustomerByCustomerId(customer.СustomerId))" class="btn btn-link">
                                            <i class="fa fa-arrow-right" aria-hidden="true"></i>
                                        </button>
                                        <ButtonEditComponent TypeName="customer" Id="@customer.СustomerId.ToString()"></ButtonEditComponent>
                                         <button type="button" @onclick="@(() => DeleteCustomer(customer.СustomerId))" class="btn btn-link">
                                            <i class="far fa-trash-alt"></i>
                                        </button>
                                        </Template>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>


                        <ButtonAddComponent TypeName="Customer"></ButtonAddComponent>
                        <button tupe="button"  @onclick="(() => LoadCustomers())" class="btn btn-link" title="Показать всех" >
                            <i class="fas fa-sync-alt" ></i>
                        </button> 
                        Найдено: <b>@customers.Count()</b>
                        <RadzenButton Text="Export XLS" Icon="grid_on" Click="@(args => Export("excel"))" Class="btn-link" />
                    </div>
                }
            </div>
        </div>
        <div class="col col-auto m-2 p-4 bg-light border widget-column-border">
            <TitleWidgetWithCountComponent Text="Заказы от покупателей" Href="ordercustomers"  CountItem=@CountOrderCustomersOnPage FullCount=@orderCustomers.Count()></TitleWidgetWithCountComponent>
            <div><br/>
                @if (orderCustomers != null)
                {
                    <div class="table-responsive">
                        <table class="table table-hover table-sm align-middle table-responsive">
                            <thead>
                                <tr class="text-align-center align-middle-th th">
                                    <th class="text-center">№</th>
                                    <th title="Покупатель. Дата и время редактирования">
                                        Покупатель<br/>
                                        Дата <IconCircleComponent ></IconCircleComponent>
                                    </th>
                                    <th class="align-middle" title="Количество позиций">
                                        Позиций <IconCircleComponent ></IconCircleComponent>
                                    </th>
                                    <th title="Количество товаров">
                                        Товаров <IconCircleComponent></IconCircleComponent>
                                    </th>
                                    <th>
                                        <ButtonAddComponent TypeName="OrderCustomer"></ButtonAddComponent>
                                        <button tupe="button"  @onclick="(() => LoadAllOrderCustomers())" class="btn btn-link">
                                            <i class="fas fa-sync-alt" ></i>
                                        </button> 
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @{ int i = 0;
                                foreach (var orderCustomer in orderCustomers)
                                {
                                    <tr @onclick="@(() => ClickOrderCustomer(orderCustomer.OrderCustomerId))" class="cursor-pointer text-align-center">
                                        <td>@orderCustomer.OrderCustomerId</td>
                                        <td>
                                            @GetCustomerByIdUseCase.Execute(orderCustomer.CustomerId)?.Company<br/>
                                            @orderCustomer.Edited.ToString("dd.MM.yyyy")<br/>
                                            @orderCustomer.Edited.ToString("HH:mm:ss")
                                        </td>
                                        <td>@GetItemOrdersByOrderCustomerIdUseCase.Execute(orderCustomer.OrderCustomerId).Count()</td>
                                        <td>@GetItemOrdersByOrderCustomerIdUseCase.Execute(orderCustomer.OrderCustomerId).Sum(n => n.Quantity)</td>
                                        <td>
                                            <ButtonEditComponent TypeName="orderCustomer" Id="@orderCustomer.OrderCustomerId.ToString()"></ButtonEditComponent>
                                            <button type="button" @onclick="@(() => DeleteOrderCustomer(orderCustomer.OrderCustomerId))" class="btn btn-link">
                                                <i class="far fa-trash-alt"></i>
                                            </button>
                                        </td>
                                    </tr>
                                    i++;
                                    if (i >= CountOrderCustomersOnPage) break;
                                }}
                            </tbody>
                        </table>
                    </div>
                    <ButtonLoadMoreComponent Text="Загрузить больше" OnClickCallback="(() => LoadMoreOrderCustomers())" CountItem=@CountOrderCustomersOnPage FullCount=@orderCustomers.Count()></ButtonLoadMoreComponent>
                }
            </div>
        </div>
        <div class="col col-auto m-2 p-4 bg-light border widget-column-border">
            <TitleWidgetWithCountComponent Text="Товары в заказах" Href="itemorders" 
                CountItem=@CountItemOrdersOnPage FullCount=@itemOrders.Count()>
            </TitleWidgetWithCountComponent>

            <div class="widget-content">
                @if (itemOrders != null)
                {
                    <div class="table-responsive">
                        <table class="table table-hover table-sm align-middle table-responsive">
                            <thead>
                                <tr class="text-align-center align-middle-th">
                                    <th>Id</th>
                                    <th>Товар</th>
                                    <th>Кол-во</th>
                                    <th>Цена</th>
                                    <th>№ заказа<br/>покупателя</th>

                                    <th>
                                        <ButtonAddComponent TypeName="ItemOrder"></ButtonAddComponent>
                                        <button tupe="button"  @onclick="(() => LoadAllItemOrders())" class="btn btn-link">
                                            <i class="fas fa-sync-alt" ></i>
                                        </button> 
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    int i = 0;
                                }
                                @foreach (var itemOrder in itemOrders)
                                {
                                    <tr  @onclick="@(() => ClickItemOrder(itemOrder.ItemOrderId))"  class="cursor-pointer text-align-center">
                                        <td>@itemOrder.ItemOrderId</td>
                                        <td>@GetProductByIdUseCase.Execute(itemOrder.ProductId)?.Name</td>
                                        <td>@itemOrder.Quantity</td>
                                        <td>@itemOrder.Price</td>
                                        <td>@GetOrderCustomerByIdUseCase.Execute(itemOrder.OrderCustomerId)?.OrderCustomerId</td>
                                        <td>
                                            <ButtonEditComponent TypeName="customer" Id="@itemOrder.ItemOrderId.ToString()"></ButtonEditComponent>
                                            <button type="button" @onclick="@(() => DeleteItemOrder(itemOrder.ItemOrderId))" class="btn btn-link">
                                                <i class="far fa-trash-alt"></i>
                                            </button>
                                        </td>
                                    </tr>
                                    i++;
                                    if (i >= CountItemOrdersOnPage) break;
                                }
                            </tbody>
                        </table>
                    </div>
                    <ButtonLoadMoreComponent Text="Загрузить больше" OnClickCallback="(() => LoadMoreItemOrders())" CountItem=@CountItemOrdersOnPage FullCount=@itemOrders.Count()></ButtonLoadMoreComponent>
                    <hr/>
                }
            </div>
        </div>
        <div class="col col-auto m-2 p-4 bg-light border widget-column-border">

            <div class="widget-footer">
                <EditForm Model="@miniItemOrder">

                    <h5>Добавить выбранные товары<br/> в заказ поставщика</h5>

                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <ViewListAsUlComponent collection="@GetSelectedItemOrdersAsCollection()"></ViewListAsUlComponent>
                    <button type="button" class="btn btn-link" @onclick="OnClearListSelectedItemOrders">Очистить список</button>

                    <div class="form-group">
                        <label for="orderVendorId">№ заказа поставщика</label>
                        <InputNumber 
                        id="orderVendorId" 
                        @bind-Value="miniItemOrder.OrderVendorId" 
                        class="form-control" 
                        @onclick="OnChangeOrderVendorId">
                        </InputNumber>
                    </div>

                    
                    <button type="button" class="btn btn-info" @onclick="OnClickSendItemOrderInOrderVendor">Отправить *</button>
                    <p> * - что увидеть изменения в таблицах<br/> "Заказы для поставщиков" и <br/> "Товары в заказах"<br/> их нужно обновить. </p>
                </EditForm>
                <div class="alert @alertClass" role="alert">
                    @warningMessage1
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    IEnumerable<int> pageSizeOptions = new int[] { 10, 20, 30 };
     private int countCustomers { get; set; }
    // RadzenDataGrid<Customer> grid;

    void LoadDataCustomers(LoadDataArgs args)
    {
        //var query =  ViewCustomersUseCase.Execute()?.AsQueryable();

        //if (!string.IsNullOrEmpty(args.Filter))
        //{
        //    query = query.Where(args.Filter);
        //}

        //if (!string.IsNullOrEmpty(args.OrderBy))
        //{
        //    query = query.OrderBy(args.OrderBy);
        //}

        //customers = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();

        //count = dbContext.OrderDetails.Count();

        customers = ViewCustomersUseCase.Execute()?.ToList();
        countCustomers = customers.Count();
        LoadOrderCustomers();
    }

    public void Export(string type)
    {
        //service.Export("Customer", type, new Query() { OrderBy = grid.Query.OrderBy, Filter = grid.Query.Filter });
    }

    [Parameter]     public int CountItemOnPage { get; set; } = 3;
    [Parameter]     public EventCallback OnUpdateCallback { get; set; }

    public Task UpdateComponent() => OnUpdateCallback.InvokeAsync(null);

    private int CountCustomersOnPage { get; set; }
    private int CountOrderCustomersOnPage { get; set; }
    private int CountItemOrdersOnPage { get; set; }

    private int LastClickOnСustomerId { get; set; }
    private int LastClickOnOrderСustomerId { get; set; }
    private int LastClickOnItemOrderId { get; set; }

    record MiniItemOrder
    {
        #region public field
        public List<int> selectedItemOrderIds { get; set; } = new List<int>();
        public int OrderVendorId { get; set; }
        #endregion

        public MiniItemOrder(int orderVendorId = 1) => OrderVendorId = orderVendorId;
    }

    #region private fields
    private List<CoreBusiness.Customer> customers;
    private List<CoreBusiness.Customer> selectedCustomers;
    private List<CoreBusiness.OrderCustomer> orderCustomers;
    private List<CoreBusiness.ItemOrder> itemOrders;
    private MiniItemOrder miniItemOrder = new MiniItemOrder();

    private string warningMessage1 { get; set; }
    private string alertClass { get; set; }

    #endregion

    private string GetSelectedItemOrdersAsString()
        => ""; // string.Join(",", miniItemOrder.selectedItemOrders);


    protected override void OnInitialized()
    {
        CountCustomersOnPage = CountOrderCustomersOnPage = CountItemOrdersOnPage = CountItemOnPage;
        base.OnInitialized();
        LoadCustomers();

    }

    #region Customer

    private void LoadCustomers()
    {
        customers = ViewCustomersUseCase.Execute()?.ToList();
        LoadOrderCustomers();
    }

    protected void DeleteCustomer(int CustomerId)
    {
        DeleteCustomerUseCase?.Delete(CustomerId);
        LoadCustomers();
        UpdateComponent();
    }

    protected void ClickCustomer(int customerId) 
    {
        LastClickOnСustomerId = customerId;
        LoadOrderCustomers();
        LastClickOnOrderСustomerId = ViewOrderCustomersUseCase.Execute().Where(x => x.CustomerId == LastClickOnСustomerId).First().OrderCustomerId;
        LoadItemOrders();
    }

    protected string GetOrderCustomerCount(int CustomerId)
    {
        return ViewOrderCustomersUseCase.Execute().Where(x => x.CustomerId == CustomerId).Count().ToString();
    }

    protected void ShowOrderCustomerByCustomerId(int CustomerId)
    {
        NavigationManager.NavigateTo($"/ordercustomers/{CustomerId}");
    }
    #endregion

    #region OrderCustomer
    private void LoadOrderCustomers()
    {
        if (LastClickOnСustomerId > 0)
            orderCustomers = ViewOrderCustomersUseCase.Execute().Where(x => x.CustomerId == LastClickOnСustomerId)?.ToList();
        else
            orderCustomers = ViewOrderCustomersUseCase.Execute()?.ToList();
        
        LoadItemOrders(); 
    }

    private void LoadAllOrderCustomers()
    {
        LastClickOnСustomerId = 0;
        LoadOrderCustomers();
    }

    private void LoadMoreOrderCustomers(){
        CountOrderCustomersOnPage += 10;
        LoadOrderCustomers();
    }

    protected void DeleteOrderCustomer(int OrderCustomerId)
    {
        DeleteOrderCustomerUseCase?.Delete(OrderCustomerId);
        LoadOrderCustomers();
        UpdateComponent();
    }

    protected void ClickOrderCustomer(int orderCustomerId)
    {
        LastClickOnOrderСustomerId = orderCustomerId;
        LoadItemOrders();
    }
    #endregion

    #region ItemOrder
    private void LoadItemOrders()
    {
        if (LastClickOnOrderСustomerId > 0)
            itemOrders = ViewItemOrdersUseCase.Execute()?.Where(x => x.OrderCustomerId == LastClickOnOrderСustomerId).ToList();
        else
            itemOrders = ViewItemOrdersUseCase.Execute()?.ToList();
    }

    private void LoadAllItemOrders()
    {
        LastClickOnOrderСustomerId = 0;
        LoadItemOrders();
    }

    private void LoadMoreItemOrders(){
        CountItemOrdersOnPage += 10;
        LoadItemOrders();
    }

    protected void DeleteItemOrder(int ItemOrderId)
    {
        DeleteItemOrderUseCase?.Delete(ItemOrderId);
        miniItemOrder.selectedItemOrderIds.Remove(ItemOrderId);
        LoadItemOrders();    
        UpdateComponent();
    }

    private IEnumerable<string> GetSelectedItemOrdersAsCollection()
    {
        var collection = new List<string>();
        var collectionForRemove = new List<int>();

        foreach (var itemOrderId in miniItemOrder.selectedItemOrderIds)
        {
            if (GetItemOrderByIdUseCase.Execute(itemOrderId) != null)
            {
                collection.Add($"{itemOrderId}: {GetProductByIdUseCase.Execute(GetItemOrderByIdUseCase.Execute(itemOrderId).ProductId).Name}");
            } else {
                collectionForRemove.Add(itemOrderId);
            }
        }
        foreach (var item in collectionForRemove)
        {
            miniItemOrder.selectedItemOrderIds.Remove(item);
        }

        alertClass = "alert-light";
        warningMessage1 = "";

        return collection;
        //string.Join(",", miniItemOrder.selectedItemOrderIds); 
    }

    protected void ClickItemOrder(int itemOrderId)
    {
        if (miniItemOrder.selectedItemOrderIds.IndexOf(itemOrderId) == -1) // .Exists(x => x. == itemOrderId))
            miniItemOrder.selectedItemOrderIds.Add(itemOrderId);
        else
            miniItemOrder.selectedItemOrderIds.Remove(itemOrderId);
    }

    protected void OnClickSendItemOrderInOrderVendor()
    {
        if (GetOrderVendorByIdUseCase.Execute(miniItemOrder.OrderVendorId) != null)
        {
            foreach (int id in miniItemOrder.selectedItemOrderIds)
            {
                ItemOrder itemOrder = GetItemOrderByIdUseCase.Execute(id);
                itemOrder.OrderVendorId = miniItemOrder.OrderVendorId;
                EditItemOrderUseCase.Execute(itemOrder);
            }
            miniItemOrder.selectedItemOrderIds.Clear();
            alertClass = "alert-success";
            warningMessage1 = "Товары успешно добавлены";
            UpdateComponent();
        } else {
            alertClass = "alert-danger";
            warningMessage1 = $"Заказ c номером {miniItemOrder.OrderVendorId} не найден";
        }
    }

    protected void OnChangeOrderVendorId()
    {
        if (GetOrderVendorByIdUseCase.Execute(miniItemOrder.OrderVendorId) != null)
        {
            alertClass = "alert-info";
            warningMessage1 = $"Заказ: {GetOrderVendorByIdUseCase.Execute(miniItemOrder.OrderVendorId).Edited}";
        } else {
            alertClass = "alert-danger";
            warningMessage1 = $"Заказ c номером {miniItemOrder.OrderVendorId} не найден";
        }
    }

    protected void OnClearListSelectedItemOrders()
    {
        miniItemOrder.selectedItemOrderIds.Clear();
    }
    #endregion 
}
