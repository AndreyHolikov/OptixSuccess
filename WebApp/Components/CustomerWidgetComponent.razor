@inject NavigationManager NavigationManager

@inject IViewCustomersUseCase ViewCustomersUseCase
@inject IDeleteCustomerUseCase DeleteCustomerUseCase
@inject IGetCustomerByIdUseCase GetCustomerByIdUseCase

@inject IViewOrderCustomersUseCase ViewOrderCustomersUseCase
@inject IDeleteOrderCustomerUseCase DeleteOrderCustomerUseCase
@inject IGetOrderCustomerByIdUseCase GetOrderCustomerByIdUseCase

@inject IViewItemOrdersUseCase ViewItemOrdersUseCase
@inject IDeleteItemOrderUseCase DeleteItemOrderUseCase
@inject IGetItemOrderByIdUseCase GetItemOrderByIdUseCase
@inject IEditItemOrderUseCase EditItemOrderUseCase
@inject IGetItemOrdersByOrderCustomerIdUseCase GetItemOrdersByOrderCustomerIdUseCase
@inject IGetItemOrdersByOrderVendorIdUseCase GetItemOrdersByOrderVendorIdUseCase

@inject IGetProductByIdUseCase GetProductByIdUseCase

@inject IGetOrderVendorByIdUseCase GetOrderVendorByIdUseCase 

@using WebApp.Components

<div class=" optix-widget optix-font">
<div class="row optix-row-1 optix-page-content">
    <div class="col col-auto m-2 p-4 bg-light border widget-column-border">
        <div>
            <h4 class="mx-auto">
                <NavLink class="nav-link optix-widget-title" href="customers" style="float:left;">
                    Покупатели (@customers.Count())
                </NavLink>     
            </h4>
            <br/>
            @if (customers != null)
            {
                <div class="table-responsive">
                    <table class="table table-hover table-sm align-middle cursor-pointer text-align-center table-responsive">
                        <thead>
                            <tr class="text-align-center">
                                <th class="align-middle">№</th>
                                <th class="align-middle">Компания</th>
                                <th>                
                                    <ButtonAddComponent TypeName="Customer"></ButtonAddComponent>
                                    <ButtonLoadComponent OnClickCallback="LoadCustomers"></ButtonLoadComponent>
                                    <button tupe="button" class="btn btn-link"></button>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @{int i = 0;}
                            @foreach (var customer in customers)
                            {
                                <tr  @onclick="@(() => ClickCustomer(customer.СustomerId))" class="cursor-pointer text-align-center">
                                    <td class="align-middle">@customer.СustomerId</td>
                                    <td class="align-middle">@customer.Company</td>
                                    <td>
                                        <button type="button" @onclick="@(() => ClickCustomer(customer.СustomerId))" class="btn btn-link">
                                            <i class="fas fa-eye"></i>
                                        </button>
                                        <ButtonEditComponent TypeName="customer" Id="@customer.СustomerId.ToString()"></ButtonEditComponent>
                                        <button type="button" @onclick="@(() => DeleteCustomer(customer.СustomerId))" class="btn btn-link">
                                            <i class="far fa-trash-alt"></i>
                                        </button>
                                    </td>
                                </tr>
                                i++;
                                if (i >= CountItemOnPage) break;
                            }
                        </tbody>
                </table>
            </div>
            }
        </div>
    </div>
    <div class="col col-auto m-2 p-4 bg-light border widget-column-border">
        <div>
            <h4 class="mx-auto">
                <NavLink class="nav-link optix-widget-title" href="ordercustomers" style="float:left;">
                    Заказы от покупателей  (@orderCustomers.Count())
                </NavLink>         
            </h4>
            <br/>
            @if (orderCustomers != null)
            {
                <div class="table-responsive">
                    <table class="table table-hover table-sm align-middle table-responsive">
                        <thead>
                            <tr class="text-align-center">
                                <th class="align-middle">№</th>
                                <th class="align-middle">
                                    Покупатель
                                    <br/>
                                    Дата
                                    <i class="fas fa-info-circle" data-toggle="tooltip" title="Клиент. Дата и время редактирования"></i>
                                </th>
                                <th class="align-middle">
                                    Позиций 
                                    <i class="fas fa-info-circle" data-toggle="tooltip" title="Количество позиций"></i>
                                </th>
                                <th class="align-middle" title="Количество товаров">
                                    Товаров
                                    <i class="fas fa-info-circle" data-toggle="tooltip" title="Количество товаров"></i>
                                </th>
                                <th>
                                    <ButtonAddComponent TypeName="OrderCustomer"></ButtonAddComponent>
                                    <ButtonLoadComponent OnClickCallback="LoadOrderCustomers"></ButtonLoadComponent>
                                    <button tupe="button" class="btn btn-link"></button>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @{int i = 0;}
                            @foreach (var orderCustomer in orderCustomers)
                            {
                                <tr @onclick="@(() => ClickOrderCustomer(orderCustomer.OrderCustomerId))" class="cursor-pointer text-align-center">
                                    <td>@orderCustomer.OrderCustomerId</td>
                                    <td>
                                        @GetCustomerByIdUseCase.Execute(orderCustomer.OrderCustomerId).Company
                                        <br/>
                                        @orderCustomer.Edited.ToString("dd.MM.yyyy")
                                        <br/>
                                        @orderCustomer.Edited.ToString("HH:mm:ss")
                                    </td>
                                    <td>@GetItemOrdersByOrderCustomerIdUseCase.Execute(orderCustomer.OrderCustomerId).Count()</td>
                                    <td>@GetItemOrdersByOrderCustomerIdUseCase.Execute(orderCustomer.OrderCustomerId).Sum(n => n.Quantity)</td>
                                    <td>
                                        <button tupe="button" @onclick="@(() => ClickOrderCustomer(orderCustomer.OrderCustomerId))" class="btn btn-link">
                                            <i class="fas fa-eye"></i>
                                        </button>
                                        <ButtonEditComponent TypeName="orderCustomer" Id="@orderCustomer.OrderCustomerId.ToString()"></ButtonEditComponent>
                                        <button type="button" @onclick="@(() => DeleteOrderCustomer(orderCustomer.OrderCustomerId))" class="btn btn-link">
                                            <i class="far fa-trash-alt"></i>
                                        </button>
                                    </td>
                                </tr>
                                i++;
                                if (i >= CountItemOnPage) break;
                            }
                        </tbody>
                </table>
            </div>
            }
        </div>
    </div>
    <div class="col col-auto m-2 p-4 bg-light border widget-column-border">
        <div class="widget-header">
            <h4 class="mx-auto">
                <NavLink class="nav-link optix-widget-title" href="itemorders" style="float:left;">Товары в заказах (@itemOrders.Count()) </NavLink>   
            </h4>
        </div>
        <div class="widget-content">
            @if (itemOrders != null)
            {
                <div class="table-responsive">
                    <table class="table table-hover table-sm align-middle table-responsive">
                        <thead>
                            <tr class="text-align-center">
                                <th class="align-middle">Id</th>
                                <th class="align-middle">Товар</th>
                                <th class="align-middle">Кол-во</th>
                                <th class="align-middle">Цена</th>
                                <th class="align-middle">Заказ<br/>покупателя</th>
                                <th>
                                    <ButtonAddComponent TypeName="ItemOrder"></ButtonAddComponent>
                                    <button tupe="button"  @onclick="(() => LoadItemOrders())" class="btn btn-link">
                                        <i class="fas fa-sync-alt" ></i>
                                    </button> 
                                    <button tupe="button" class="btn btn-link"></button>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @{int i =0;}
                            @foreach (var itemOrder in itemOrders)
                            {
                                <tr  @onclick="@(() => ClickItemOrder(itemOrder.ItemOrderId))"  class="cursor-pointer text-align-center">
                                    <td>@itemOrder.ItemOrderId</td>
                                    <td>@GetProductByIdUseCase.Execute(itemOrder.ProductId).Name</td>
                                    <td>@itemOrder.Quantity</td>
                                    <td>@itemOrder.Price</td>
                                    <td>@GetOrderCustomerByIdUseCase.Execute(itemOrder.OrderCustomerId).OrderCustomerId</td>
                                    <td>
                                        <ButtonEditComponent TypeName="customer" Id="@itemOrder.ItemOrderId.ToString()"></ButtonEditComponent>
                                        <button type="button" @onclick="@(() => DeleteItemOrder(itemOrder.ItemOrderId))" class="btn btn-link">
                                            <i class="far fa-trash-alt"></i>
                                        </button>
                                    </td>
                                </tr>
                                i++;
                                if (i >= CountItemOnPage) break;
                            }
                        </tbody>
                </table>
            </div>
            <hr/>
            }
        </div>

        <div class="widget-footer">
            <EditForm Model="@miniItemOrder">

                <h5>Добавить товары в заказ поставщика</h5>

                <DataAnnotationsValidator />
                <ValidationSummary />
    
                <div class="form-group">
                    <label>Выбраные товары: </label>
                    <ViewListAsUlComponent collection="@GetSelectedItemOrdersAsCollection()"></ViewListAsUlComponent>
                </div>

                <div class="form-group">
                    <label for="orderVendorId">№ Заказа поставщика</label>
                    <InputNumber id="orderVendorId" @bind-Value="miniItemOrder.OrderVendorId" class="form-control"></InputNumber>
                </div>

                <button type="button" class="btn btn-info" @onclick="OnClickSendItemOrderInOrderVendor">Отправить в заказ</button>
            </EditForm>
        </div>
    </div>
</div>
</div>

@code {

    [Parameter] public int CountItemOnPage { get; set; } = 3;

    record MiniItemOrder 
    {
        #region public field
        public List<int> selectedItemOrderIds { get; set; } = new List<int>();  
        public int OrderVendorId { get; set; }
        #endregion

        public MiniItemOrder(int orderVendorId = 1 ) => OrderVendorId = orderVendorId;
    }

    #region private fields
    private List<CoreBusiness.Customer> customers;
    private List<CoreBusiness.OrderCustomer> orderCustomers;
    private List<CoreBusiness.ItemOrder> itemOrders;
    private MiniItemOrder miniItemOrder = new MiniItemOrder();

    #endregion

    protected override void OnInitialized()
    {
        base.OnInitialized();
        LoadCustomers();
        LoadOrderCustomers();
        LoadItemOrders();
    }

    #region Customer

    private void LoadCustomers()
        => customers = ViewCustomersUseCase.Execute()?.ToList();

    protected void DeleteCustomer(int CustomerId)
    {
        DeleteCustomerUseCase?.Delete(CustomerId);
        LoadCustomers();
    }

    protected void ClickCustomer(int customerId)
        => orderCustomers = ViewOrderCustomersUseCase.Execute()?.Where(x=> x.CustomerId == customerId).ToList();
    #endregion 

    #region OrderCustomer
    private void LoadOrderCustomers()
        => orderCustomers = ViewOrderCustomersUseCase.Execute()?.ToList();

    protected void DeleteOrderCustomer(int OrderCustomerId)
    {
        DeleteOrderCustomerUseCase?.Delete(OrderCustomerId);
        LoadOrderCustomers();
    }

    protected void ClickOrderCustomer(int orderCustomerId)
        => itemOrders = ViewItemOrdersUseCase.Execute()?.Where(x => x.OrderCustomerId == orderCustomerId).ToList();
    #endregion 

    #region ItemOrder
    private void LoadItemOrders()
        => itemOrders = ViewItemOrdersUseCase.Execute()?.ToList();

    protected void DeleteItemOrder(int ItemOrderId)
    {
        DeleteItemOrderUseCase?.Delete(ItemOrderId);
        LoadItemOrders();
    }

    //private string GetSelectedItemOrdersAsString()
    //    => string.Join(",", miniItemOrder.selectedItemOrderIds);

    private IEnumerable<string> GetSelectedItemOrdersAsCollection()
    {
        List<string> collection = new List<string>();
        foreach (var itemOrderId in miniItemOrder.selectedItemOrderIds)
        {
            collection.Add($"{itemOrderId}: {GetProductByIdUseCase.Execute(GetItemOrderByIdUseCase.Execute(itemOrderId).ProductId).Name}");
        }
        return collection;
        //string.Join(",", miniItemOrder.selectedItemOrderIds); 
    }

    protected void ClickItemOrder(int itemOrderId)
    {
        if (miniItemOrder.selectedItemOrderIds.IndexOf(itemOrderId) == -1) // .Exists(x => x. == itemOrderId))
            miniItemOrder.selectedItemOrderIds.Add(itemOrderId);
        else
            miniItemOrder.selectedItemOrderIds.Remove(itemOrderId);
    }

    protected void OnClickSendItemOrderInOrderVendor()
    {
        if (GetOrderVendorByIdUseCase.Execute(miniItemOrder.OrderVendorId) != null)
        {
            foreach (int id in miniItemOrder.selectedItemOrderIds)
            {
                ItemOrder itemOrder = GetItemOrderByIdUseCase.Execute(id);
                itemOrder.OrderVendorId = miniItemOrder.OrderVendorId;
                EditItemOrderUseCase.Execute(itemOrder);
            }
            miniItemOrder.selectedItemOrderIds.Clear();
        }
    }
    #endregion 
}
